#!/usr/bin/env php
<?php
/**
 * Created by PhpStorm.
 * User: root
 * Date: 18.01.17
 * Time: 10:40
 */

$container = null;

$files = [
    'autoload' => 'vendor' . DIRECTORY_SEPARATOR . 'autoload.php',
    'env_configurator' => 'config' . DIRECTORY_SEPARATOR . 'env_configurator.php',
    'container' => 'config' . DIRECTORY_SEPARATOR . 'container.php'
];

$paths = [
    __DIR__ . DIRECTORY_SEPARATOR . '..' . DIRECTORY_SEPARATOR . '..',
    __DIR__ . DIRECTORY_SEPARATOR . '..',
    __DIR__,
];

foreach ($paths as $path) {
    $file = $path . DIRECTORY_SEPARATOR . $files['autoload'];
    if (file_exists($file)) {
        $file = realpath($path . DIRECTORY_SEPARATOR . $files['autoload']);
        require $file;
        $file = realpath($path . DIRECTORY_SEPARATOR . $files['env_configurator']);
        require_once $file;
        $file = realpath($path . DIRECTORY_SEPARATOR . $files['container']);
        $container = require $file;
        unset($files);
        break;
    }
}

if (isset($files)) {
    echo "require file not found. ";
    exit(1);
}

use Composer\IO\ConsoleIO;
use rollun\installer\Install\InstallerInterface;
use Symfony\Component\Console\Helper\DebugFormatterHelper;
use Symfony\Component\Console\Helper\DescriptorHelper;
use Symfony\Component\Console\Helper\FormatterHelper;
use Symfony\Component\Console\Helper\HelperSet;
use Symfony\Component\Console\Helper\ProcessHelper;
use Symfony\Component\Console\Helper\QuestionHelper;
use Symfony\Component\Console\Input\ArgvInput;
use Symfony\Component\Console\Output\ConsoleOutput;

/** init composer IO  */
$consoleInput = new ArgvInput();
$consoleOutput = new ConsoleOutput();

$helperSet = new HelperSet([
    'question' => new QuestionHelper(),
    'formatter' => new FormatterHelper(),
    'descriptor' => new DescriptorHelper(),
    'process' => new ProcessHelper(),
    'debugFormatter' => new DebugFormatterHelper(),
]);
$composerIO = new ConsoleIO($consoleInput, $consoleOutput, $helperSet);

if ($argc < 2) {
    $composerIO->writeError('Usage: InstallerSelfCall [fullInstallerClassName] install [/uninstall/reinstall] ');
    exit(1);
}

$className = $argv[1];
if (class_exists($className)) {
    $reflectionClass = new ReflectionClass($className);
    if ($reflectionClass->implementsInterface(InstallerInterface::class) &&
        $reflectionClass->isInstantiable()
    ) {
        try {
            $installer = $reflectionClass->newInstance($container, $composerIO);
            $method = isset($argv[2]) ? $argv[2] : "install";
            call_user_func([$installer, $method]);
            exit(1);
        } catch (Exception $exception) {
            $composerIO->writeError(
                "Installer: $className crash by exception with message: " .
                $exception->getMessage()
            );
            exit(1);
        }
    }
    $composerIO->writeError("$className in not instantiable.");
    exit(1);
}
$composerIO->writeError("Wrong class name: $className");
exit(1);
